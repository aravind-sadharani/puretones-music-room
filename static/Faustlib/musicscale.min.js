function getJSONmusicscale(){return'{"name": "musicscale","filename": "musicscale.dsp","version": "2.33.1","compile_options": "-lang wasm-e -es 1 -single -ftz 2","library_list": ["/opt/homebrew/Cellar/faust/2.33.1/share/faust/stdfaust.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/envelopes.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/basics.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/signals.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/maths.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/platform.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/physmodels.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/routes.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/delays.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/filters.lib"],"include_pathnames": ["/opt/homebrew/Cellar/faust/2.33.1/share/faust","/usr/local/share/faust","/usr/share/faust",".","/Users/aravind/Web/fauststatic"],"size": 131536,"inputs": 0,"outputs": 2,"meta": [ { "basics.lib/name": "Faust Basic Element Library" },{ "basics.lib/version": "0.1" },{ "compile_options": "-lang wasm-e -es 1 -single -ftz 2" },{ "delays.lib/name": "Faust Delay Library" },{ "delays.lib/version": "0.1" },{ "envelopes.lib/adsr:author": "Yann Orlarey and Andrey Bundin" },{ "envelopes.lib/author": "GRAME" },{ "envelopes.lib/copyright": "GRAME" },{ "envelopes.lib/license": "LGPL with exception" },{ "envelopes.lib/name": "Faust Envelope Library" },{ "envelopes.lib/version": "0.1" },{ "filename": "musicscale.dsp" },{ "filters.lib/fir:author": "Julius O. Smith III" },{ "filters.lib/fir:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/fir:license": "MIT-style STK-4.3 license" },{ "filters.lib/iir:author": "Julius O. Smith III" },{ "filters.lib/iir:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/iir:license": "MIT-style STK-4.3 license" },{ "filters.lib/lowpass0_highpass1": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/lowpass0_highpass1:author": "Julius O. Smith III" },{ "filters.lib/lowpass:author": "Julius O. Smith III" },{ "filters.lib/lowpass:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/lowpass:license": "MIT-style STK-4.3 license" },{ "filters.lib/name": "Faust Filters Library" },{ "filters.lib/tf1:author": "Julius O. Smith III" },{ "filters.lib/tf1:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/tf1:license": "MIT-style STK-4.3 license" },{ "filters.lib/tf1s:author": "Julius O. Smith III" },{ "filters.lib/tf1s:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/tf1s:license": "MIT-style STK-4.3 license" },{ "filters.lib/tf2:author": "Julius O. Smith III" },{ "filters.lib/tf2:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/tf2:license": "MIT-style STK-4.3 license" },{ "filters.lib/tf2s:author": "Julius O. Smith III" },{ "filters.lib/tf2s:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/tf2s:license": "MIT-style STK-4.3 license" },{ "filters.lib/version": "0.3" },{ "maths.lib/author": "GRAME" },{ "maths.lib/copyright": "GRAME" },{ "maths.lib/license": "LGPL with exception" },{ "maths.lib/name": "Faust Math Library" },{ "maths.lib/version": "2.3" },{ "name": "musicscale" },{ "platform.lib/name": "Generic Platform Library" },{ "platform.lib/version": "0.1" },{ "routes.lib/name": "Faust Signal Routing Library" },{ "routes.lib/version": "0.2" },{ "signals.lib/name": "Faust Signal Routing Library" },{ "signals.lib/version": "0.0" }],"ui": [ {"type": "vgroup","label": "musicscale","items": [ {"type": "hslider","label": "Common_Parameters/12_Note_Scale/Dha/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Dha/0.01_Cent","index": 176,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Dha/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Dha/Cent","index": 172,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Ga/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Ga/0.01_Cent","index": 136,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Ga/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Ga/Cent","index": 132,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Ma/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Ma/0.01_Cent","index": 152,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Ma/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Ma/Cent","index": 148,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Ni/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Ni/0.01_Cent","index": 192,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Ni/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Ni/Cent","index": 188,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Pa/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Pa/0.01_Cent","index": 160,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Pa/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Pa/Cent","index": 156,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Re/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Re/0.01_Cent","index": 120,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Re/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Re/Cent","index": 116,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Sa/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Sa/0.01_Cent","index": 104,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/Sa/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/Sa/Cent","index": 100,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/dha/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/dha/0.01_Cent","index": 168,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/dha/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/dha/Cent","index": 164,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/ga/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/ga/0.01_Cent","index": 128,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/ga/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/ga/Cent","index": 124,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/ma/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/ma/0.01_Cent","index": 144,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/ma/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/ma/Cent","index": 140,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/ni/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/ni/0.01_Cent","index": 184,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/ni/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/ni/Cent","index": 180,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/re/0.01_Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/re/0.01_Cent","index": 112,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/12_Note_Scale/re/Cent","address": "/musicscale/Common_Parameters/12_Note_Scale/re/Cent","index": 108,"init": 0,"min": -120,"max": 120,"step": 1},{"type": "hslider","label": "Common_Parameters/Fine_Tune","address": "/musicscale/Common_Parameters/Fine_Tune","index": 72,"init": 0,"min": -100,"max": 100,"step": 1},{"type": "hslider","label": "Common_Parameters/Octave","address": "/musicscale/Common_Parameters/Octave","index": 92,"init": 0,"min": -2,"max": 2,"step": 1},{"type": "hslider","label": "Common_Parameters/Period","address": "/musicscale/Common_Parameters/Period","index": 16644,"init": 2,"min": 0,"max": 3,"step": 0.1},{"type": "hslider","label": "Variance","address": "/musicscale/Variance","index": 76,"meta": [{ "00": "" }],"init": 2,"min": 0,"max": 4,"step": 0.1},{"type": "hslider","label": "Common_Parameters/Pitch","address": "/musicscale/Common_Parameters/Pitch","index": 96,"meta": [{ "0": "" },{ "style": "radio{\'B\':14;\'A#\':13;\'A\':12;\'G#\':11;\'G\':10;\'F#\':9;\'F\':8;\'E\':7;\'D#\':6;\'D\':5;\'C#\':4;\'C\':3}" }],"init": 0,"min": 0,"max": 11,"step": 1},{"type": "hslider","label": "bend","address": "/musicscale/bend","index": 80,"meta": [{ "midi": "pitchwheel" }],"init": 0,"min": -6,"max": 6,"step": 0.01},{"type": "hslider","label": "freq","address": "/musicscale/freq","index": 68,"init": 200,"min": 50,"max": 1000,"step": 0.01},{"type": "hslider","label": "gain","address": "/musicscale/gain","index": 16,"init": 0.5,"min": 0,"max": 1,"step": 0.01},{"type": "button","label": "gate","address": "/musicscale/gate","index": 20}]}]}'}function getJSONeffect(){return'{"name": "musicscale_effect","filename": "musicscale_effect.dsp","version": "2.33.1","compile_options": "-lang wasm-e -es 1 -single -ftz 2","library_list": ["/Users/aravind/Web/fauststatic/musicscale.dsp","/opt/homebrew/Cellar/faust/2.33.1/share/faust/stdfaust.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/demos.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/reverbs.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/delays.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/maths.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/platform.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/signals.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/filters.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/basics.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/routes.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/envelopes.lib","/opt/homebrew/Cellar/faust/2.33.1/share/faust/physmodels.lib"],"include_pathnames": ["/opt/homebrew/Cellar/faust/2.33.1/share/faust","/usr/local/share/faust","/usr/share/faust",".","/Users/aravind/Web/fauststatic","/Users/aravind/Web/fauststatic"],"size": 959028,"inputs": 2,"outputs": 2,"meta": [ { "basics.lib/name": "Faust Basic Element Library" },{ "basics.lib/version": "0.1" },{ "compile_options": "-lang wasm-e -es 1 -single -ftz 2" },{ "delays.lib/name": "Faust Delay Library" },{ "delays.lib/version": "0.1" },{ "envelopes.lib/adsr:author": "Yann Orlarey and Andrey Bundin" },{ "envelopes.lib/author": "GRAME" },{ "envelopes.lib/copyright": "GRAME" },{ "envelopes.lib/license": "LGPL with exception" },{ "envelopes.lib/name": "Faust Envelope Library" },{ "envelopes.lib/version": "0.1" },{ "filename": "musicscale_effect.dsp" },{ "filters.lib/allpass_comb:author": "Julius O. Smith III" },{ "filters.lib/allpass_comb:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/allpass_comb:license": "MIT-style STK-4.3 license" },{ "filters.lib/fir:author": "Julius O. Smith III" },{ "filters.lib/fir:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/fir:license": "MIT-style STK-4.3 license" },{ "filters.lib/iir:author": "Julius O. Smith III" },{ "filters.lib/iir:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/iir:license": "MIT-style STK-4.3 license" },{ "filters.lib/lowpass0_highpass1": "MIT-style STK-4.3 license" },{ "filters.lib/lowpass0_highpass1:author": "Julius O. Smith III" },{ "filters.lib/lowpass:author": "Julius O. Smith III" },{ "filters.lib/lowpass:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/lowpass:license": "MIT-style STK-4.3 license" },{ "filters.lib/name": "Faust Filters Library" },{ "filters.lib/peak_eq_rm:author": "Julius O. Smith III" },{ "filters.lib/peak_eq_rm:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/peak_eq_rm:license": "MIT-style STK-4.3 license" },{ "filters.lib/tf1:author": "Julius O. Smith III" },{ "filters.lib/tf1:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/tf1:license": "MIT-style STK-4.3 license" },{ "filters.lib/tf1s:author": "Julius O. Smith III" },{ "filters.lib/tf1s:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/tf1s:license": "MIT-style STK-4.3 license" },{ "filters.lib/tf2:author": "Julius O. Smith III" },{ "filters.lib/tf2:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/tf2:license": "MIT-style STK-4.3 license" },{ "filters.lib/tf2s:author": "Julius O. Smith III" },{ "filters.lib/tf2s:copyright": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters.lib/tf2s:license": "MIT-style STK-4.3 license" },{ "filters.lib/version": "0.3" },{ "maths.lib/author": "GRAME" },{ "maths.lib/copyright": "GRAME" },{ "maths.lib/license": "LGPL with exception" },{ "maths.lib/name": "Faust Math Library" },{ "maths.lib/version": "2.3" },{ "name": "musicscale_effect" },{ "platform.lib/name": "Generic Platform Library" },{ "platform.lib/version": "0.1" },{ "reverbs.lib/name": "Faust Reverb Library" },{ "reverbs.lib/version": "0.2" },{ "routes.lib/name": "Faust Signal Routing Library" },{ "routes.lib/version": "0.2" },{ "signals.lib/name": "Faust Signal Routing Library" },{ "signals.lib/version": "0.0" }],"ui": [ {"type": "hgroup","label": "Zita Light","items": [ {"type": "vslider","label": "Dry/Wet Mix","address": "/Zita_Light/Dry/Wet_Mix","index": 65564,"meta": [{ "1": "" },{ "style": "knob" },{ "tooltip": "-1 = dry, 1 = wet" }],"init": 0,"min": -1,"max": 1,"step": 0.01},{"type": "vslider","label": "Level","address": "/Zita_Light/Level","index": 8,"meta": [{ "2": "" },{ "style": "knob" },{ "tooltip": "Output scale         factor" },{ "unit": "dB" }],"init": -6,"min": -70,"max": 40,"step": 0.1}]}]}'}class FaustWasm2ScriptProcessorPoly{constructor(e,t,s,a){this.name=e,this.dspProps=t,this.effectProps=s,this._log=[],this.node,this.debug="object"==typeof a&&a.debug}getNode(e,t,s,a,i,r,l){let o;const n=parseInt(this.dspProps.inputs),m=parseInt(this.dspProps.outputs);try{o=i.createScriptProcessor(r,n,m)}catch(e){return this.error("Error in createScriptProcessor: "+e),null}o.json_object=this.dspProps,o.effect_json_object=this.effectProps,o.output_handler=null,o.ins=null,o.outs=null,o.mixing=null,o.compute_handler=null,o.dspInChannnels=[],o.dspOutChannnels=[],o.fFreqLabel=[],o.fGateLabel=[],o.fGainLabel=[],o.fKeyFun=null,o.fVelFun=null,o.fDate=0,o.fPitchwheelLabel=[],o.fCtrlLabel=new Array(128).fill(null).map((()=>[])),o.remap=(e,t,s,a,i)=>(e-t)/(s-t)*(i-a)+a,o.numIn=n,o.numOut=m,this.log(o.numIn),this.log(o.numOut),o.ptr_size=4,o.sample_size=4,o.factory=t.exports,o.HEAP=a.buffer,o.HEAP32=new Int32Array(o.HEAP),o.HEAPF32=new Float32Array(o.HEAP),this.log(o.HEAP),this.log(o.HEAP32),this.log(o.HEAPF32),o.outputs_timer=5,o.outputs_items=[],o.inputs_items=[],o.audio_heap_ptr=0,o.audio_heap_ptr_inputs=o.audio_heap_ptr,o.audio_heap_ptr_outputs=o.audio_heap_ptr_inputs+o.numIn*o.ptr_size,o.audio_heap_ptr_mixing=o.audio_heap_ptr_outputs+o.numOut*o.ptr_size,o.audio_heap_inputs=o.audio_heap_ptr_mixing+o.numOut*o.ptr_size,o.audio_heap_outputs=o.audio_heap_inputs+o.numIn*r*o.sample_size,o.audio_heap_mixing=o.audio_heap_outputs+o.numOut*r*o.sample_size,o.dsp_start=o.audio_heap_mixing+o.numOut*r*o.sample_size,o.mixer=e.exports,o.effect=s?s.exports:null,this.log(o.mixer),this.log(o.factory),this.log(o.effect),o.dsp_voices=[],o.dsp_voices_state=[],o.dsp_voices_level=[],o.dsp_voices_date=[],o.kActiveVoice=0,o.kFreeVoice=-1,o.kReleaseVoice=-2,o.kNoVoice=-3,o.pathTable=[];for(let e=0;e<l;e++)o.dsp_voices[e]=o.dsp_start+e*parseInt(o.json_object.size),o.dsp_voices_state[e]=o.kFreeVoice,o.dsp_voices_level[e]=0,o.dsp_voices_date[e]=0;o.effect_start=o.dsp_voices[l-1]+parseInt(json_object.size),o.getPlayingVoice=e=>{let t=o.kNoVoice,s=Number.MAX_VALUE;for(let a=0;a<l;a++)o.dsp_voices_state[a]===e&&o.dsp_voices_date[a]<s&&(s=o.dsp_voices_date[a],t=a);return t},o.allocVoice=e=>(o.factory.instanceClear(o.dsp_voices[e]),o.dsp_voices_date[e]=o.fDate++,o.dsp_voices_state[e]=o.kActiveVoice,e),o.getFreeVoice=()=>{for(let e=0;e<l;e++)if(o.dsp_voices_state[e]===o.kFreeVoice)return o.allocVoice(e);let e=o.kNoVoice,t=o.kNoVoice,s=Number.MAX_VALUE,a=Number.MAX_VALUE;for(let i=0;i<l;i++)o.dsp_voices_state[i]===o.kReleaseVoice?o.dsp_voices_date[i]<s&&(s=o.dsp_voices_date[i],e=i):o.dsp_voices_date[i]<a&&(a=o.dsp_voices_date[i],t=i);return s!=Number.MAX_VALUE?(this.log(`Steal release voice : voice_date = ${o.dsp_voices_date[e]} cur_date = ${o.fDate} voice = ${e}`),o.allocVoice(e)):a!=Number.MAX_VALUE?(this.log(`Steal playing voice : voice_date = ${o.dsp_voices_date[t]} cur_date = ${o.fDate} voice = ${t}`),o.allocVoice(t)):o.kNoVoice},o.update_outputs=()=>{o.outputs_items.length>0&&o.output_handler&&0==o.outputs_timer--&&(o.outputs_timer=5,o.outputs_items.forEach((e=>o.output_handler(e,o.factory.getParamValue(o.dsp,o.pathTable[e])))))},o.compute=e=>{for(let t=0;t<o.numIn;t++){const s=e.inputBuffer.getChannelData(t);o.dspInChannnels[t].set(s)}try{o.compute_handler&&o.compute_handler(r),o.mixer.clearOutput(r,o.numOut,o.outs);for(let e=0;e<l;e++)o.dsp_voices_state[e]!==o.kFreeVoice&&(o.factory.compute(o.dsp_voices[e],r,o.ins,o.mixing),o.dsp_voices_level[e]=o.mixer.mixVoice(r,o.numOut,o.mixing,o.outs),o.dsp_voices_level[e]<5e-4&&o.dsp_voices_state[e]===o.kReleaseVoice&&(o.dsp_voices_state[e]=o.kFreeVoice));o.effect&&o.effect.compute(o.effect_start,r,o.outs,o.outs)}catch(e){console.log("ERROR in compute ("+e+")")}o.update_outputs();for(let t=0;t<o.numOut;t++){const s=e.outputBuffer.getChannelData(t),a=o.dspOutChannnels[t];s.set(a)}},o.midiToFreq=e=>440*Math.pow(2,(e-69)/12),o.parse_ui=e=>e.forEach((e=>o.parse_group(e))),o.parse_group=e=>e.items?o.parse_items(e.items):null,o.parse_items=e=>e.forEach((e=>o.parse_item(e))),o.parse_item=e=>{if("vgroup"===e.type||"hgroup"===e.type||"tgroup"===e.type)o.parse_items(e.items);else if("hbargraph"===e.type||"vbargraph"===e.type)o.outputs_items.push(e.address),o.pathTable[e.address]=parseInt(e.index);else if("vslider"===e.type||"hslider"===e.type||"button"===e.type||"checkbox"===e.type||"nentry"===e.type){if(o.inputs_items.push(e.address),o.pathTable[e.address]=parseInt(e.index),!e.meta)return;e.meta.forEach((t=>{const s=t.midi;if(!s)return;const a=s.trim();if("pitchwheel"===a)o.fPitchwheelLabel.push({path:e.address,min:parseFloat(e.min),max:parseFloat(e.max)});else{const t=a.match(/^ctrl\s(\d+)/);if(!t)return;o.fCtrlLabel[parseInt(t[1])].push({path:e.address,min:parseFloat(e.min),max:parseFloat(e.max)})}}))}},o.initAux=()=>{if(this.log("buffer_size "+r),o.onaudioprocess=o.compute,o.numIn>0){o.ins=o.audio_heap_ptr_inputs;for(let e=0;e<o.numIn;e++)o.HEAP32[(o.ins>>2)+e]=o.audio_heap_inputs+r*o.sample_size*e;const e=o.HEAP32.subarray(o.ins>>2,o.ins+o.numIn*o.ptr_size>>2);for(let t=0;t<o.numIn;t++)o.dspInChannnels[t]=o.HEAPF32.subarray(e[t]>>2,e[t]+r*o.sample_size>>2)}if(o.numOut>0){o.outs=o.audio_heap_ptr_outputs,o.mixing=o.audio_heap_ptr_mixing;for(let e=0;e<o.numOut;e++)o.HEAP32[(o.outs>>2)+e]=o.audio_heap_outputs+r*o.sample_size*e,o.HEAP32[(o.mixing>>2)+e]=o.audio_heap_mixing+r*o.sample_size*e;const e=o.HEAP32.subarray(o.outs>>2,o.outs+o.numOut*o.ptr_size>>2);for(let t=0;t<o.numOut;t++)o.dspOutChannnels[t]=o.HEAPF32.subarray(e[t]>>2,e[t]+r*o.sample_size>>2)}o.parse_ui(o.json_object.ui),o.effect&&o.parse_ui(o.effect_json_object.ui),o.inputs_items.forEach((e=>{e.endsWith("/gate")?o.fGateLabel.push(o.pathTable[e]):e.endsWith("/freq")?(o.fKeyFun=e=>o.midiToFreq(e),o.fFreqLabel.push(o.pathTable[e])):e.endsWith("/key")?(o.fKeyFun=e=>e,o.fFreqLabel.push(o.pathTable[e])):e.endsWith("/gain")?(o.fVelFun=e=>e/127,o.fGainLabel.push(o.pathTable[e])):(e.endsWith("/vel")||e.endsWith("/velocity"))&&(o.fVelFun=e=>e,o.fGainLabel.push(o.pathTable[e]))}));for(let e=0;e<l;e++)o.factory.init(o.dsp_voices[e],i.sampleRate);o.effect&&o.effect.init(o.effect_start,i.sampleRate)},o.destroy=()=>{},o.getSampleRate=()=>i.sampleRate,o.getNumInputs=()=>o.numIn,o.getNumOutputs=()=>o.numOut,o.init=e=>{for(let t=0;t<l;t++)o.factory.init(o.dsp_voices[t],e)},o.instanceInit=e=>{for(let t=0;t<l;t++)o.factory.instanceInit(o.dsp_voices[t],e)},o.instanceConstants=e=>{for(let t=0;t<l;t++)o.factory.instanceConstants(o.dsp_voices[t],e)},o.instanceResetUserInterface=()=>{for(let e=0;e<l;e++)o.factory.instanceResetUserInterface(o.dsp_voices[e])},o.instanceClear=()=>{for(let e=0;e<l;e++)o.factory.instanceClear(o.dsp_voices[e])},o.metadata=e=>{this.dspProps.meta&&this.dspProps.meta.forEach((t=>e.declare(Object.keys(t)[0],Object.values(t)[0])))},o.setOutputParamHandler=e=>o.output_handler=e,o.getOutputParamHandler=()=>o.output_handler,o.keyOn=(e,t,s)=>{const a=o.getFreeVoice();this.log("keyOn voice "+a);for(let e=0;e<o.fFreqLabel.length;e++)o.factory.setParamValue(o.dsp_voices[a],o.fFreqLabel[e],o.fKeyFun(t));for(let e=0;e<o.fGateLabel.length;e++)o.factory.setParamValue(o.dsp_voices[a],o.fGateLabel[e],1);for(let e=0;e<o.fGainLabel.length;e++)o.factory.setParamValue(o.dsp_voices[a],o.fGainLabel[e],o.fVelFun(s));o.dsp_voices_state[a]=t},o.keyOff=(e,t,s)=>{const a=o.getPlayingVoice(t);if(a!==o.kNoVoice){this.log("keyOff voice"+a);for(let e=0;e<o.fGateLabel.length;e++)o.factory.setParamValue(o.dsp_voices[a],o.fGateLabel[e],0);o.dsp_voices_state[a]=o.kReleaseVoice}else this.log("Playing voice not found...")},o.allNotesOff=()=>{for(var e=0;e<l;e++){for(let t=0;t<o.fGateLabel.length;t++)o.factory.setParamValue(o.dsp_voices[e],o.fGateLabel[t],0);o.dsp_voices_state[e]=o.kReleaseVoice}},o.ctrlChange=(e,t,s)=>{123!==t&&120!==t||o.allNotesOff(),o.fCtrlLabel[t].length&&o.fCtrlLabel[t].forEach((e=>{const t=e.path;o.setParamValue(t,o.remap(s,0,127,e.min,e.max)),o.output_handler&&o.output_handler(t,o.getParamValue(t))}))},o.pitchWheel=(e,t)=>{o.fPitchwheelLabel.forEach((e=>{o.setParamValue(e.path,o.remap(t,0,16383,e.min,e.max)),o.output_handler&&o.output_handler(e.path,o.getParamValue(e.path))}))};const c=(e,t)=>{if("object"!=typeof e)return!1;if(e.address)return e.address===t;for(const s in e)if(c(e[s],t))return!0;return!1};return o.setParamValue=(e,t)=>{if(o.effect&&c(effect_json_object,e))o.effect.setParamValue(o.effect_start,o.pathTable[e],t);else for(let s=0;s<l;s++)o.factory.setParamValue(o.dsp_voices[s],o.pathTable[e],t)},o.getParamValue=e=>o.effect&&c(effect_json_object,e)?o.effect.getParamValue(o.effect_start,o.pathTable[e]):o.factory.getParamValue(o.dsp_voices[0],o.pathTable[e]),o.getParams=()=>o.inputs_items,o.getJSON=()=>{const e=o.json_object,t=o.effect_json_object,s={...e};return s.ui=t?[{type:"tgroup",label:"Sequencer",items:[{type:"vgroup",label:"Instrument",items:e.ui},{type:"vgroup",label:"Effect",items:t.ui}]}]:[{type:"tgroup",label:"Polyphonic",items:[{type:"vgroup",label:"Voices",items:e.ui}]}],JSON.stringify(s)},o.setComputeHandler=e=>o.compute_handler=e,o.getComputeHandler=()=>o.compute_handler,o.initAux(),o}createMemory(e,t){let s=(e=>{let t=65536;for(;t<e;)t*=2;return t})((effect_json_object?parseInt(effect_json_object.size):0)+parseInt(json_object.size)*t+(parseInt(json_object.inputs)+2*parseInt(json_object.outputs))*(4+4*e))/65536;return s=Math.max(2,s),new WebAssembly.Memory({initial:s,maximum:s})}async createDSP(e,t,s){const a=this.createMemory(t,s),i={imports:{print:console.log},memory:{memory:a}},r={env:{memory:a,memoryBase:0,tableBase:0,_abs:Math.abs,_acosf:Math.acos,_asinf:Math.asin,_atanf:Math.atan,_atan2f:Math.atan2,_ceilf:Math.ceil,_cosf:Math.cos,_expf:Math.exp,_floorf:Math.floor,_fmodf:(e,t)=>e%t,_logf:Math.log,_log10f:Math.log10,_max_f:Math.max,_min_f:Math.min,_remainderf:(e,t)=>e-Math.round(e/t)*t,_powf:Math.pow,_roundf:Math.fround,_sinf:Math.sin,_sqrtf:Math.sqrt,_tanf:Math.tan,_acoshf:Math.acosh,_asinhf:Math.asinh,_atanhf:Math.atanh,_coshf:Math.cosh,_sinhf:Math.sinh,_tanhf:Math.tanh,_acos:Math.acos,_asin:Math.asin,_atan:Math.atan,_atan2:Math.atan2,_ceil:Math.ceil,_cos:Math.cos,_exp:Math.exp,_floor:Math.floor,_fmod:(e,t)=>e%t,_log:Math.log,_log10:Math.log10,_max_:Math.max,_min_:Math.min,_remainder:(e,t)=>e-Math.round(e/t)*t,_pow:Math.pow,_round:Math.fround,_sin:Math.sin,_sqrt:Math.sqrt,_tan:Math.tan,_acosh:Math.acosh,_asinh:Math.asinh,_atanh:Math.atanh,_cosh:Math.cosh,_sinh:Math.sinh,_tanh:Math.tanh,table:new WebAssembly.Table({initial:0,element:"anyfunc"})}};try{const l=await fetch("/Faustlib/mixer32.wasm"),o=await l.arrayBuffer(),n=await WebAssembly.instantiate(o,i);try{const i=await fetch("/Faustlib/musicscale.wasm"),l=await i.arrayBuffer(),o=await WebAssembly.instantiate(l,r);try{const i=await fetch("/Faustlib/musicscale_effect.wasm"),l=await i.arrayBuffer(),m=await WebAssembly.instantiate(l,r);return this.node=this.getNode(n.instance,o.instance,m.instance,a,e,t,s),this.node}catch(i){return this.log(i),this.log("Faust "+this.name+"_effect cannot be loaded or compiled"),this.node=this.getNode(n.instance,o.instance,null,a,e,t,s),this.node}}catch(e){this.error(e),this.error("Faust "+this.name+" cannot be loaded or compiled")}}catch(e){this.error(e),this.error("Faust mixer32 cannot be loaded or compiled")}}log(e){this._log.push(e),this.debug&&console.log(e)}error(e){this._log.push(e),console.error(e)}}const dspName="musicscale";let json_object,effect_json_object;try{const e=getJSONmusicscale();json_object=JSON.parse(e)}catch(e){console.error("Error in JSON.parse: "+e)}try{const e=void 0===getJSONeffect?null:getJSONeffect();effect_json_object=JSON.parse(e)}catch(e){console.error("Error in JSON.parse: "+e)}const instance=new FaustWasm2ScriptProcessorPoly(dspName,json_object,effect_json_object);if("undefined"==typeof module)window.musicscalePoly=instance;else{const e={};e.musicscalePoly=instance,module.exports=e}
